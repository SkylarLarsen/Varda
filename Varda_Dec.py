import astropy
import astropy.timeseries
import astropy.units as u
import numpy as np
import matplotlib.pyplot as plt
import math as m
from astropy.timeseries import LombScargle
import statistics as stat

### Raw Data #######################################################################################################################################################
t = (58154.51741503,58154.52006401,58154.52249801,58154.52450822,                                                                        #Feb 05 2018
     58155.55294107,58155.55474757,58155.5564104,58155.55807328,58155.55978149,58155.56144503,58155.56310799,                            #Feb 06 2018
     58198.45563286,58198.45760036,58198.45926344,58198.4609264,58198.46258936,58198.46432915,58198.46599211,58198.46765511,             #Mar 21 2018
     58198.46931807,58198.47098115,                                                                                                      #"                                                           
     58245.44644411,58245.44823844,                                                                                                      #May 07 2018
     58247.46065024,58247.46245057,58247.46411353,58247.46577649,58247.46743949,58247.46910244,58247.4708279,58247.47249086,             #May 09 2018
     58247.47415394,58247.47581711,                                                                                                      #"                                                                  
     58248.35267674,58248.35464374,58248.35630669,58248.35796969,58248.35963332,                                                         #May 10 2018
     58250.36650974,58250.36840719,58250.37007003,58250.37173299,58250.37339594,58250.37665682,58250.37832003,58250.37998299,            #May 12 2018
     58272.27288403,58272.27473832,58272.2764014,58272.27806436,58272.27972744,58272.2813904,58272.2831809,58272.28484386,               #Jun 03 2018
     58274.25946214,58274.26162985,58274.26259839,58274.26356689,58274.26453543,58274.26550393,58274.26647247,58274.26744097,            #Jun 05 2018
     58274.26862697,58274.26959547,58274.27056401,                                                                                       #"
     58277.28057292,58277.28239504,58277.28371075,58277.2850265,58277.28634225,58277.287658,58277.28897371,58277.29028958,58277.29160533,#Jun 08 2018
     58277.29292108,                                                                                                                     #"                                                                    
     58278.25700996,58278.25857837,58278.25989408,58278.26120983,58278.26252558,58278.26384133,58278.26515696,58278.26647267,            #Jun 09 2018
     58278.26778854,58278.26910417,58278.27068633,58278.27200208,58278.27331783,58278.27463358,58278.27594921,                           #"                                      
     58279.25367338,58279.25568808,58279.25700383,58279.25831954,58279.25963529,58279.26095104,58279.26226679,58279.26358254,            #Jun 10 2018
     58279.26508496,58279.26640079,                                                                                                      #"                                                                       
     58309.30658821,58309.30897317,                                                                                                      #Jul 10 2018
     58344.15521343,58344.18049167,58344.1836125,58344.28287512,58344.2844455,58344.286039,58344.28735462,58344.28873021,                #Aug 14 2018
     58344.29004583,58344.29145383,                                                                                                      #"                                                                       
     58346.12774342,58346.12985394,58346.13161111,58346.13330265,58346.13505244,58346.13675394,58346.13846157,58346.14017199,            #Aug 16 2018
     58346.14194894,58346.14395786,58346.14567511,58346.14867015,58346.15039107,58346.15208194,                                          #"
     58362.11826668,58362.11946935,58362.12043772,58362.12140614,58362.12264435,58362.12361272,58362.12458114,58362.12654664,            #Sep 01 2018
     58362.12751506,58362.12848335,58362.12952314,58362.13049156,58362.13145997,58362.20557222,58362.20671735,58362.20768576,            #"
     58362.20865418,58362.20962247,58362.21059122,58362.21155997,58362.2125286,58362.21349722,58362.21446564,58362.21543439,             #"
     58362.21658601,58362.21755439,58362.21852268,58362.21949131,58362.22045972)                                                         #"


y = (0.039028215,0.040672468,0.035315058,0.048959194,                                                                                                #Feb 05 2018
     0.024971967,0.074310117,0.029999614,0.023486892,0.030118694,0.032949922,0.103471277,                                                            #Feb 06 2018
     0.067802574,0.07261645,0.088451147,0.073328754,0.084845832,0.082696505,0.066492409,0.073326604,0.071881385,0.0711521,                           #Mar 21 2018
     0.061263209,0.017900094,0.043592539,0.047054765,0.051032639,0.048531037,0.051069161,0.048568623,0.053491678,0.052432228,0.047050875,0.04670844, #May 05 2018
     0.061242837,0.064984553,0.063747699,0.058910546,0.065581941,                                                                                    #May 10 2018
     0.109320711,0.055633022,0.058469792,0.087224825,0.071340359,0.065971598,0.064484151,0.046081843,                                                #May 12 2018
     0.062341492,0.073434675,0.069397476,0.050962267,0.065286752,0.064133221,0.077987742,0.059915912,                                                #Jun 03 2018
     0.064049813,0.068767158,0.075700995,0.068595464,0.071569882,0.067344937,0.07103994,0.055295567,0.068313623,0.082089925,0.069586139,             #Jun 05 2018
     0.066488108,0.063331929,0.077795034,0.067778358,0.064962222,0.063226621,0.062931848,0.05291642,0.067742429,0.051248938,                         #Jun 08 2018
     0.081244004,0.073037895,0.075862625,0.067167624,0.070713187,0.080019309,0.081046801,0.073434285,0.071581224,0.067210361,0.067919487,0.072549014,#Jun 09 2018
     0.077539087,0.059129684,0.083921692,                                                                                                            #"
     0.064264163,0.071687426,0.070805227,0.067403841,0.065442759,0.055562228,0.081322287,0.08296288,0.078057912,0.07789918,                          #Jun 10 2018
     0.057503763,0.039484917,                                                                                                                        #Jul 10 2018
     0.048406192,0.028193722,0.077528512,0.053964459,0.125669801,0.13630957,0.06181378,0.058799257,0.021024219,0.158023096,                          #Aug 14 2018
     0.059132159,0.070096422,0.06863845,0.054942829,0.055843881,0.059647079,0.058904779,0.062543949,0.051081498,0.070622237,0.050652064,0.072362686, #Aug 16 2018
     0.042753649,0.05460662,                                                                                                                         #"
     0.047033579,0.061427145,0.064820759,0.052375412,0.048233047,0.039746629,0.044221278,0.032299762,0.040014395,0.052405847,0.046096095,0.038690695,#Sep 01 2018
     0.060805318,0.075682166,0.042886825,0.012797189,0.056867658,0.026774915,0.038093906,0.04293293,0.041288808,0.04360473,0.064275412,0.067314598,  #"
     0.016325032,0.038434794,0.028862453,0.030818647,0.02160958)                                                                                     #"

old_err = [0.011,0.008,0.003,0.008,
       0.005,0.005,0.008,0.03,0.012,0.016,0.026,
       0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,
       0.0004,0.002,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,
       0.0004,0.0004,0.0004,0.0004,0.0004,
       0.002,0.002,0.001,0.001,0.001,0.001,0.001,0.001,
       0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,
       0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,
       0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,
       0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,
       0.001,0.001,0.0004,0.001,0.001,0.001,0.001,0.001,0.001,0.001,
       0.03,0.082,
       0.002,0.007,0.007,0.004,0.005,0.001,0.002,0.003,0.003,0.01,
       0.007,0.002,0.001,0.001,0.0004,0.0004,0.001,0.001,0.001,0.003,0.005,0.001,0.001,0.001,
       0.001,0.001,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,
       0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001]

y_err = []
for i in old_err:
    y_err.append(m.sqrt(i) * 0.0024)                                    #adjust error for telescope scale
#print(y_err)

average_y = sum(y)/len(y)                                               #average offset
stdev_y = stat.stdev(y)                                                 #stdev offset
#print("Average:",average_y)
#print("Standard Deviation:",stdev_y)
plt.scatter(t,y)
plt.xlabel('MJD',fontsize=15)
plt.ylabel('offset (arcseconds)',fontsize=15)
plt.rc('xtick', labelsize=10)
plt.rc('ytick', labelsize=10)
plt.title('Raw Dec Offset vs. Modified Julian Date', fontsize=15)
plt.errorbar(t,y,yerr=y_err, linestyle="None")                          #error bars of raw data (note: error bars too small to see)

### Frequency/Power Graph #########################################################################################################################################
frequency, power = LombScargle(t, y,y_err).autopower(nyquist_factor=2)
plt.plot(frequency, power)

### ECM Function ##################################################################################################################################################
refCoor = 57368.84735444445             #ECM Starting Values
mean = 0.0366658
slope = 0.0000184514
period = 365.256
aSin1 = 0.00596366
bCos1 = -0.00600029

ECM_output= []                          #Running raw outputs through ECM function
for i in t:
    c = i
    ECM_point = mean + bCos1 * m.cos((2 * m.pi * (c - refCoor))/period) + aSin1 * m.sin((2 * m.pi * (c - refCoor))/period) + slope * (c - refCoor)
    #print(ECM_point)
    ECM_output.append(ECM_point)
#print(ECM_output)
#plt.scatter(t, ECM_output)

data = []                                     #Subtract ECM output from raw output values
zip_object = zip(y, ECM_output)
for y_i, ECM_output_i in zip_object:
    data.append(y_i-(ECM_output_i))
#print(data)

#plt.scatter(t,y)
plt.scatter(t,data)                           #Plot new ECM Function values vs time
plt.xlabel('MJD',fontsize=15)
plt.ylabel('offset (arcseconds)',fontsize=15)
plt.rc('xtick', labelsize=10)
plt.rc('ytick', labelsize=10)
plt.title('ECM Function Dec Offset vs. Modified Julian Date', fontsize=15)
plt.errorbar(t,data,yerr=y_err, linestyle="None")

### Preparation of Data ###########################################################################################################################################
### Frequency
ls = LombScargle(t, data, y_err)
frequency, power = LombScargle(t, y,y_err).autopower(nyquist_factor=2) #KEEP THIS
plt.plot(frequency, power)  


### Units
period_days = 1 / frequency

best_period = period_days[np.argmax(power)]
phase = (t / best_period) % 1
print("Best period: {0:.2f} hours".format(24 * best_period))
print("Best period: {0:.2f} days".format(best_period))
#print(phase)
#plt.scatter(phase, y)

### Lomb-Scargle Periodogram ######################################################################################################################################
fig, ax = plt.subplots(figsize=(20, 5))

phase_model = np.linspace(-0.5, 1.5, 100)
best_frequency = frequency[np.argmax(power)]
#print(best_frequency, (1/best_frequency))
mag_model = ls.model(phase_model / best_frequency, best_frequency)
residual_model = ls.model(phase / best_frequency, best_frequency)
#print(mag_model)
#print(phase, residual_model)

peak_amp = max(mag_model)
low_amp = min(mag_model)
print('peak amplitude:', peak_amp)
print('low amplitude:',low_amp)
print('total amplitude:', peak_amp - low_amp)       #Distance between highest peak and lowest peak

for offset in [-1, 0, 1]:
    ax.errorbar(phase + offset, data, y_err, fmt='.',
               color='gray', ecolor='lightgray', capsize=0);    #Plot points
ax.plot(phase_model, mag_model, '-r', lw=2)                     #Plot model
ax.set(xlim=(0, 1))
plt.xlabel('period',fontsize=18)
plt.ylabel('offset (arcseconds)',fontsize=15)
plt.rc('xtick', labelsize=20)
plt.rc('ytick', labelsize=10)
plt.title('Dec Offset vs. Period', fontsize=30)
#plt.rc('figure', titlesize=100)

ax.invert_yaxis()         #invert y-axis

### Residual Error ################################################################################################################################################
resi = []
zip_object = zip(data, residual_model)
for data_i, residual_model_i in zip_object:
    resi.append(data_i - residual_model_i)
#print(resi)

resi_sqr = []
for i in resi:
    resi_sqr.append(i**2)
#print(resi_sqr)

mean_sqr = sum(resi_sqr)/(len(resi_sqr) - 1)
#print(mean_sqr)

root_mean_sqr = mean_sqr ** 0.5
print(root_mean_sqr)                  #Root-mean-square method of collecting residual error
